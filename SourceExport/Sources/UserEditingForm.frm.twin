[ FormDesignerId ("B863AAB5-BDC6-4F9A-826D-84FD2867A12F") ]
[ ClassId ("8B9A5D02-C76D-49DE-A6A5-864E0E6F145B") ]
[ InterfaceId ("9659EBC9-66B0-4E3A-812A-E385319FF8F8") ]
[ EventInterfaceId ("1C99A729-E3BF-42D8-8CD3-965C7952EA94") ]
Class UserEditingForm
    Attribute VB_Name = "UserEditingForm"
    Attribute VB_GlobalNameSpace = False
    Attribute VB_Creatable = False
    Attribute VB_PredeclaredId = True
    Attribute VB_Exposed = False
    Option Explicit
    #If (VBA7 = 0) Then
    Private Enum LongPtr
    [_]
    End Enum
    #End If
    Private Const CC_RGBINIT As Long = &H1
    Private Type TCHOOSECOLOR
    lStructSize As Long
    hWndOwner As LongPtr
    hInstance As LongPtr
    RGBResult As Long
    lpCustColors As LongPtr
    Flags As Long
    lCustData As LongPtr
    lpfnHook As LongPtr
    lpTemplateName As LongPtr
    End Type
    #If Win64 Then
    Private Declare PtrSafe Function SendMessage Lib "user32" Alias "SendMessageW" (ByVal hWnd As LongPtr, ByVal wMsg As Long, ByVal wParam As LongPtr, ByRef lParam As Any) As LongPtr
    Private Declare PtrSafe Function ChooseColor Lib "comdlg32" Alias "ChooseColorW" (ByRef lpChooseColor As TCHOOSECOLOR) As Long
    #Else
    Private Declare Function SendMessage Lib "user32" Alias "SendMessageW" (ByVal hWnd As Long, ByVal wMsg As Long, ByVal wParam As Long, ByRef lParam As Any) As Long
    Private Declare Function ChooseColor Lib "comdlg32" Alias "ChooseColorW" (ByRef lpChooseColor As TCHOOSECOLOR) As Long
    #End If
    Private Const COL_NORMAL As Long = 1
    Private Const COL_ONLYNUMBERS As Long = 2
    Private Const COL_CALENDARVALIDATION As Long = 3
    Private Const COL_LOCKED As Long = 4
    Private Const COL_REDBKCOLOR As Long = 5
    Private Const COL_NOTALLOWED As Long = 6
    Private Const COL_NOCLOSEBYNAVIGATIONKEY As Long = 7
    Private Const COL_SINGLELINE As Long = 8
    Private Const COL_MERGEDCELLS As Long = 9
    Private Const COL_COMBODROPDOWN As Long = 10
    Private Const COL_COMBOEDITABLE As Long = 11
    Private Const COL_COMBOBUTTON As Long = 12
    
    Private Sub Command1_Click()
    Unload Me
    End Sub
    
    Private Sub Form_Load()
    Call SetupVisualStylesFixes(Me)
    Dim i As Long
    For i = VBFlexGrid1.FixedRows To VBFlexGrid1.Rows - 1
        VBFlexGrid1.TextMatrix(i, 0) = i
    Next i
    VBFlexGrid1.MergeCol(COL_MERGEDCELLS) = True
    For i = VBFlexGrid1.FixedRows To VBFlexGrid1.Rows - 1
        VBFlexGrid1.TextMatrix(i, COL_NORMAL) = Chr(64 + i)
        VBFlexGrid1.TextMatrix(i, COL_LOCKED) = VBFlexGrid1.TextMatrix(i, COL_NORMAL)
        VBFlexGrid1.TextMatrix(i, COL_REDBKCOLOR) = VBFlexGrid1.TextMatrix(i, COL_NORMAL)
        VBFlexGrid1.TextMatrix(i, COL_NOTALLOWED) = VBFlexGrid1.TextMatrix(i, COL_NORMAL)
        VBFlexGrid1.TextMatrix(i, COL_NOCLOSEBYNAVIGATIONKEY) = VBFlexGrid1.TextMatrix(i, COL_NORMAL)
        VBFlexGrid1.TextMatrix(i, COL_SINGLELINE) = VBFlexGrid1.TextMatrix(i, COL_NORMAL) & "_" & Chr(64 + i + 1)
    Next i
    For i = VBFlexGrid1.FixedRows To VBFlexGrid1.Rows - 1
        VBFlexGrid1.TextMatrix(i, COL_ONLYNUMBERS) = i
    Next i
    For i = VBFlexGrid1.FixedRows To VBFlexGrid1.Rows - 1
        VBFlexGrid1.TextMatrix(i, COL_CALENDARVALIDATION) = VBA.DateAdd("d", i, Int(Now()))
    Next i
    VBFlexGrid1.ColComboMode(COL_CALENDARVALIDATION) = FlexComboModeCalendar
    For i = VBFlexGrid1.FixedRows To VBFlexGrid1.Rows - 1 - 1 Step 2
        VBFlexGrid1.TextMatrix(i, COL_MERGEDCELLS) = Chr(64 + i)
        VBFlexGrid1.TextMatrix(i + 1, COL_MERGEDCELLS) = Chr(64 + i)
    Next i
    VBFlexGrid1.ColComboMode(COL_COMBODROPDOWN) = FlexComboModeDropDown
    VBFlexGrid1.ColComboItems(COL_COMBODROPDOWN) = "Arnold|Bob|Charlie|David|Elena|Felix|Greg|Hanna|Ivan|Jacob"
    For i = VBFlexGrid1.FixedRows To VBFlexGrid1.Rows - 1 - 2 Step 3
        VBFlexGrid1.TextMatrix(i, COL_COMBODROPDOWN) = "Arnold"
        VBFlexGrid1.TextMatrix(i + 1, COL_COMBODROPDOWN) = "Bob"
        VBFlexGrid1.TextMatrix(i + 2, COL_COMBODROPDOWN) = "Charlie"
    Next i
    VBFlexGrid1.ColComboMode(COL_COMBOEDITABLE) = FlexComboModeEditable
    VBFlexGrid1.ColComboItems(COL_COMBOEDITABLE) = "Arnold|Bob|Charlie|David|Elena|Felix|Greg|Hanna|Ivan|Jacob"
    For i = VBFlexGrid1.FixedRows To VBFlexGrid1.Rows - 1 - 2 Step 3
        VBFlexGrid1.TextMatrix(i, COL_COMBOEDITABLE) = "Arnold"
        VBFlexGrid1.TextMatrix(i + 1, COL_COMBOEDITABLE) = "Bob"
        VBFlexGrid1.TextMatrix(i + 2, COL_COMBOEDITABLE) = "Charlie"
    Next i
    VBFlexGrid1.ColComboMode(COL_COMBOBUTTON) = FlexComboModeButton
    VBFlexGrid1.ColComboItems(COL_COMBOBUTTON) = vbNullString
    VBFlexGrid1.AutoSize 0, VBFlexGrid1.Cols - 1, FlexAutoSizeModeColWidth, FlexAutoSizeScopeAll
    End Sub
    
    Private Sub VBFlexGrid1_KeyDown(KeyCode As Integer, Shift As Integer)
    If Option5.Value = True Then
        If KeyCode = vbKeyReturn Then VBFlexGrid1.StartEdit
    End If
    End Sub
    
    Private Sub VBFlexGrid1_DividerDblClick(ByVal Row As Long, ByVal Col As Long)
    If Row = -1 Then
        VBFlexGrid1.AutoSize Col, , FlexAutoSizeModeColWidth, , , , CBool(VBFlexGrid1.ClipMode = FlexClipModeExcludeHidden)
    ElseIf Col = -1 Then
        VBFlexGrid1.AutoSize Row, , FlexAutoSizeModeRowHeight, , , , CBool(VBFlexGrid1.ClipMode = FlexClipModeExcludeHidden)
    End If
    End Sub
    
    Private Sub VBFlexGrid1_RowColChange()
    ' The combo cue can only be displayed on the current cell.
    If VBFlexGrid1.Row >= VBFlexGrid1.FixedRows Then
        Select Case VBFlexGrid1.Col
            Case COL_CALENDARVALIDATION, COL_COMBODROPDOWN, COL_COMBOEDITABLE
                VBFlexGrid1.ComboCue = FlexComboCueDropDown
            Case COL_COMBOBUTTON
                VBFlexGrid1.ComboCue = FlexComboCueButton
            Case Else
                VBFlexGrid1.ComboCue = FlexComboCueNone
        End Select
    Else
        VBFlexGrid1.ComboCue = FlexComboCueNone
    End If
    End Sub
    
    Private Sub VBFlexGrid1_BeforeEdit(Row As Long, Col As Long, ByVal Reason As FlexEditReasonConstants, Cancel As Boolean)
    ' This event is for evaluation if the cell can be edited.
    ' Nothing has been initialized yet. So EditRow/EditCol can't be used. Instead they are passed in the parameters.
    ' Row and Col parameters are ByRef so they can be changed, if necessary.
    ' The Reason parameter is a value indicating why this event was called.
    ' EditReason property is not appropriate as it contains the value from the last edit which was not canceled in this event.
    ' EditReason can be -1 as an alias for a failed edit attempt (canceled here) or the grid was never edited before.
    If Row < VBFlexGrid1.FixedRows Or Col < VBFlexGrid1.FixedCols Then
        ' Fixed cells can't be edited by the end-user. (only by code)
        ' However, here it can be ensured that this is not possible at all.
        ' Cancel = True
    End If
    If Col = COL_NOTALLOWED Then
        ' The last col we want to be in a special range which is not allowed to be edited.
        Cancel = True
    End If
    End Sub
    
    Private Sub VBFlexGrid1_AfterEdit(ByVal Row As Long, ByVal Col As Long, ByVal Changed As Boolean)
    ' This event is fired when the edit control is destroyed. It can be useful to resort the grid for example.
    ' EditRow/EditCol is already reset to -1. That's why they got preserved in the Row/Col parameters in this event.
    ' Changed parameter is True when changes were comitted.
    ' EditCloseMode property can be used to find out why the editing was closed.
    End Sub
    
    Private Sub VBFlexGrid1_EnterEdit()
    ' This event will be called always when entering edit mode. Edit control is already displayed.
    Label1.Caption = "Editing mode ON (Row:" & VBFlexGrid1.EditRow & " Col: " & VBFlexGrid1.EditCol & ")"
    End Sub
    
    Private Sub VBFlexGrid1_LeaveEdit()
    ' This event will be called always when exiting edit mode. Edit control is still displayed.
    ' EditCloseMode property can be used to find out why the editing is about to be closed.
    Label1.Caption = "Editing mode OFF"
    End Sub
    
    Private Sub VBFlexGrid1_EditSetupStyle(dwStyle As Long, dwExStyle As Long)
    ' Edit control is not created, used to modify window styles.
    Select Case VBFlexGrid1.EditCol
        Case COL_ONLYNUMBERS
            Const ES_NUMBER As Long = &H2000
            dwStyle = dwStyle Or ES_NUMBER
        Case COL_LOCKED
            Const ES_READONLY As Long = &H800
            dwStyle = dwStyle Or ES_READONLY
        Case COL_SINGLELINE, COL_CALENDARVALIDATION
            Const ES_MULTILINE As Long = &H4, ES_AUTOVSCROLL As Long = &H40, ES_AUTOHSCROLL As Long = &H80
            ' If 'SingleLine' is True then the whole flex grid is single lined. ES_MULTILINE is not predefined in that case.
            ' So it is better to check for ES_MULTILINE before removing it.
            If (dwStyle And ES_MULTILINE) = ES_MULTILINE Then
                dwStyle = dwStyle And Not (ES_MULTILINE Or ES_AUTOVSCROLL)
                dwStyle = dwStyle Or ES_AUTOHSCROLL
            End If
    End Select
    End Sub
    
    Private Sub VBFlexGrid1_EditSetupWindow(BackColor As stdole.OLE_COLOR, ForeColor As stdole.OLE_COLOR)
    ' Edit control is created but not yet displayed.
    Select Case VBFlexGrid1.EditCol
        Case COL_REDBKCOLOR
            BackColor = vbRed
        Case COL_CALENDARVALIDATION
            If Option6.Value = True Then
                ' FlexComboModeCalendar now behaves like FlexComboModeDropDown when the edit control has ES_READONLY.
                ' It means always immediately popup of the calendar and commit on a date click.
                Const EM_SETREADONLY As Long = &HCF
                SendMessage VBFlexGrid1.hWndEdit, EM_SETREADONLY, 1, ByVal 0&
            End If
    End Select
    End Sub
    
    Private Sub VBFlexGrid1_EditQueryClose(ByVal CloseMode As FlexEditCloseModeConstants, Cancel As Boolean)
    Select Case VBFlexGrid1.EditCol
        Case COL_NOCLOSEBYNAVIGATIONKEY
            If CloseMode = FlexEditCloseModeNavigationKey Then Cancel = True
    End Select
    End Sub
    
    Private Sub VBFlexGrid1_Validate(Cancel As Boolean)
    ' This must be handled when validation of the edit control should be for the whole form.
    If Option1.Value = True Then
        If VBFlexGrid1.hWndEdit <> 0 Then ' Check if editing is active.
            ' Try to commit. The method 'CommitEdit' will fire the ValidateEdit event.
            ' Doing this way will prevent double validation in case a MsgBox is shown in the ValidateEdit event.
            Cancel = Not VBFlexGrid1.CommitEdit() ' Call VBFlexGrid1_ValidateEdit(Cancel)
        End If
    End If
    End Sub
    
    Private Sub VBFlexGrid1_ValidateEdit(Cancel As Boolean)
    ' If validation fails the control will remain in edit mode.
    ' EditCloseMode property is not meaningful yet.
    Select Case VBFlexGrid1.EditCol
        Case COL_CALENDARVALIDATION
            Dim Text As String
            Text = Trim$(VBFlexGrid1.EditText)
            If Not Text = vbNullString Then
                If InStr(Text, vbCrLf) Then ' Only single line entries are valid.
                    Cancel = True
                Else
                    Cancel = Not IsDate(Text)
                End If
                If Cancel = False Then
                    ' Ensure unique date format before commit. (override possible custom format of the text box)
                    VBFlexGrid1.EditText = VBFlexGrid1.ComboCalendarValue
                End If
            End If
    End Select
    If Cancel = True Then
        If Option3.Value = True Then
            VBFlexGrid1.CancelEdit
            Cancel = False ' Ensuring 'VBFlexGrid1_Validate' will not be blocked.
        Else
            If Cancel = True Then Beep ' Give user a minimal feedback.
        End If
    End If
    End Sub
    
    Private Sub VBFlexGrid1_ComboButtonClick()
    Static CustomColors(0 To 15) As Long, CustomColorsInitialized As Boolean
    Select Case VBFlexGrid1.EditCol
        Case COL_COMBOBUTTON
            Dim CHCLR As TCHOOSECOLOR
            With CHCLR
            .lStructSize = LenB(CHCLR)
            .hWndOwner = Me.hWnd
            .hInstance = App.hInstance
            .Flags = CC_RGBINIT
            If CustomColorsInitialized = False Then
                Dim i As Long, IntValue As Integer
                For i = 0 To 15
                    IntValue = 255 - (i * 16)
                    CustomColors(i) = RGB(IntValue, IntValue, IntValue)
                Next i
                CustomColorsInitialized = True
            End If
            .lpCustColors = VarPtr(CustomColors(0))
            .RGBResult = WinColor(VBFlexGrid1.Cell(FlexCellBackColor, VBFlexGrid1.EditRow, VBFlexGrid1.EditCol))
            End With
            If ChooseColor(CHCLR) <> 0 Then
                VBFlexGrid1.Cell(FlexCellBackColor, VBFlexGrid1.EditRow, VBFlexGrid1.EditCol) = CHCLR.RGBResult
                VBFlexGrid1.CommitEdit
            Else
                VBFlexGrid1.CancelEdit
            End If
    End Select
    End Sub
    

End Class
